%!PS-Adobe-2.0
%%Title: ./ARMCI_Get_latency.eps
%%Creator: gnuplot 4.0 patchlevel 0
%%CreationDate: Wed Sep  1 09:22:15 2010
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 554 770
%%Orientation: Landscape
%%Pages: (atend)
%%EndComments
/gnudict 256 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/vshift -66 def
/dl {10.0 mul} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
/Rounded false def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke userlinewidth 2 mul setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/AL { stroke userlinewidth 2 div setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/UL { dup gnulinewidth mul /userlinewidth exch def
      dup 1 lt {pop 1} if 10 mul /udl exch def } def
/PL { stroke userlinewidth setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/LTw { PL [] 1 setgray } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 udl mul 2 udl mul] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 1 0 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 1 0 DL } def
/LT2 { PL [2 dl 3 dl] 0 0 1 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/Pnt { stroke [] 0 setdash
   gsave 1 setlinecap M 0 0 V stroke grestore } def
/Dia { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt } def
/Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/Box { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt } def
/Crs { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/TriU { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt  } def
/Star { 2 copy Pls Crs } def
/BoxF { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V  hpt2 0 V  0 vpt2 V
  hpt2 neg 0 V  closepath fill } def
/TriUF { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill } def
/TriD { stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt  } def
/TriDF { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill } def
/Pent { stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt } def
/PentF { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore } def
/Circle { stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt } def
/CircleF { stroke [] 0 setdash hpt 0 360 arc fill } def
/C0 { BL [] 0 setdash 2 copy moveto vpt 90 450  arc } bind def
/C1 { BL [] 0 setdash 2 copy        moveto
       2 copy  vpt 0 90 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C2 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C3 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C4 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C5 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 90 arc
       2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc } bind def
/C6 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 90 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C7 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 0 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C8 { BL [] 0 setdash 2 copy moveto
      2 copy vpt 270 360 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C9 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 270 450 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C10 { BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
       2 copy moveto
       2 copy vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C11 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
       2 copy moveto
       2 copy  vpt 270 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C12 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C13 { BL [] 0 setdash  2 copy moveto
       2 copy  vpt 0 90 arc closepath fill
       2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C14 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 360 arc closepath fill
               vpt 0 360 arc } bind def
/C15 { BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/Rec   { newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
       neg 0 rlineto closepath } bind def
/Square { dup Rec } bind def
/Bsquare { vpt sub exch vpt sub exch vpt2 Square } bind def
/S0 { BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare } bind def
/S1 { BL [] 0 setdash 2 copy vpt Square fill Bsquare } bind def
/S2 { BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S3 { BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare } bind def
/S4 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S5 { BL [] 0 setdash 2 copy 2 copy vpt Square fill
       exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S6 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S7 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
       2 copy vpt Square fill
       Bsquare } bind def
/S8 { BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare } bind def
/S9 { BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S10 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
       Bsquare } bind def
/S11 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
       Bsquare } bind def
/S12 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare } bind def
/S13 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy vpt Square fill Bsquare } bind def
/S14 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S15 { BL [] 0 setdash 2 copy Bsquare fill Bsquare } bind def
/D0 { gsave translate 45 rotate 0 0 S0 stroke grestore } bind def
/D1 { gsave translate 45 rotate 0 0 S1 stroke grestore } bind def
/D2 { gsave translate 45 rotate 0 0 S2 stroke grestore } bind def
/D3 { gsave translate 45 rotate 0 0 S3 stroke grestore } bind def
/D4 { gsave translate 45 rotate 0 0 S4 stroke grestore } bind def
/D5 { gsave translate 45 rotate 0 0 S5 stroke grestore } bind def
/D6 { gsave translate 45 rotate 0 0 S6 stroke grestore } bind def
/D7 { gsave translate 45 rotate 0 0 S7 stroke grestore } bind def
/D8 { gsave translate 45 rotate 0 0 S8 stroke grestore } bind def
/D9 { gsave translate 45 rotate 0 0 S9 stroke grestore } bind def
/D10 { gsave translate 45 rotate 0 0 S10 stroke grestore } bind def
/D11 { gsave translate 45 rotate 0 0 S11 stroke grestore } bind def
/D12 { gsave translate 45 rotate 0 0 S12 stroke grestore } bind def
/D13 { gsave translate 45 rotate 0 0 S13 stroke grestore } bind def
/D14 { gsave translate 45 rotate 0 0 S14 stroke grestore } bind def
/D15 { gsave translate 45 rotate 0 0 S15 stroke grestore } bind def
/DiaE { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke } def
/BoxE { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke } def
/TriUE { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke } def
/TriDE { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke } def
/PentE { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore } def
/CircE { stroke [] 0 setdash 
  hpt 0 360 arc stroke } def
/Opaque { gsave closepath 1 setgray fill grestore 0 setgray closepath } def
/DiaW { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke } def
/BoxW { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke } def
/TriUW { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke } def
/TriDW { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke } def
/PentW { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore } def
/CircW { stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke } def
/BoxFill { gsave Rec 1 setgray fill grestore } def
/BoxColFill {
  gsave Rec
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor
  fill grestore } def
%
% PostScript Level 1 Pattern Fill routine
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill { gsave /PFa [ 9 2 roll ] def
    PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
    PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
    gsave 1 setgray fill grestore clip
    currentlinewidth 0.5 mul setlinewidth
    /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
    0 0 M PFa 5 get rotate PFs -2 div dup translate
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 M 0 PFs V } for
    0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 2 1 roll M PFs 0 V } for
    } if
    stroke grestore } def
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {show} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} bind def
/MFwidth {0 exch {dup 3 get{dup dup 0 get findfont exch 1 get scalefont
     setfont 6 get stringwidth pop add} {pop} ifelse} forall} bind def
/MLshow { currentpoint stroke M
  0 exch R MFshow } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R MFshow } def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R MFshow } def
end
%%EndProlog
%%Page: 1 1
gnudict begin
gsave
50 50 translate
0.100 0.100 scale
90 rotate
0 -5040 translate
0 setgray
newpath
(Helvetica) findfont 200 scalefont setfont
1.000 UL
LTb
1.000 UL
LTa
900 600 M
5960 0 V
1.000 UL
LTb
900 600 M
63 0 V
5897 0 R
-63 0 V
stroke
780 600 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 0)]
] -66.7 MRshow
grestore
1.000 UL
LTb
1.000 UL
LTa
900 1125 M
5960 0 V
1.000 UL
LTb
900 1125 M
63 0 V
5897 0 R
-63 0 V
stroke
780 1125 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 10)]
] -66.7 MRshow
grestore
1.000 UL
LTb
1.000 UL
LTa
900 1650 M
5960 0 V
1.000 UL
LTb
900 1650 M
63 0 V
5897 0 R
-63 0 V
stroke
780 1650 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 20)]
] -66.7 MRshow
grestore
1.000 UL
LTb
1.000 UL
LTa
900 2175 M
5960 0 V
1.000 UL
LTb
900 2175 M
63 0 V
5897 0 R
-63 0 V
stroke
780 2175 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 30)]
] -66.7 MRshow
grestore
1.000 UL
LTb
1.000 UL
LTa
900 2700 M
5960 0 V
1.000 UL
LTb
900 2700 M
63 0 V
5897 0 R
-63 0 V
stroke
780 2700 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 40)]
] -66.7 MRshow
grestore
1.000 UL
LTb
1.000 UL
LTa
900 3225 M
5960 0 V
1.000 UL
LTb
900 3225 M
63 0 V
5897 0 R
-63 0 V
stroke
780 3225 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 50)]
] -66.7 MRshow
grestore
1.000 UL
LTb
1.000 UL
LTa
900 3750 M
5960 0 V
1.000 UL
LTb
900 3750 M
63 0 V
5897 0 R
-63 0 V
stroke
780 3750 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 60)]
] -66.7 MRshow
grestore
1.000 UL
LTb
1.000 UL
LTa
900 4275 M
120 0 V
2766 0 R
3074 0 V
1.000 UL
LTb
900 4275 M
63 0 V
5897 0 R
-63 0 V
stroke
780 4275 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 70)]
] -66.7 MRshow
grestore
1.000 UL
LTb
1.000 UL
LTa
900 4800 M
5960 0 V
1.000 UL
LTb
900 4800 M
63 0 V
5897 0 R
-63 0 V
stroke
780 4800 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 80)]
] -66.7 MRshow
grestore
1.000 UL
LTb
1.000 UL
LTa
6860 600 M
0 4200 V
1.000 UL
LTb
6860 600 M
0 63 V
0 4137 R
0 -63 V
stroke
6860 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 16384)]
] -66.7 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTa
6318 600 M
0 4200 V
1.000 UL
LTb
6318 600 M
0 63 V
0 4137 R
0 -63 V
stroke
6318 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 8192)]
] -66.7 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTa
5776 600 M
0 4200 V
1.000 UL
LTb
5776 600 M
0 63 V
0 4137 R
0 -63 V
stroke
5776 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 4096)]
] -66.7 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTa
5235 600 M
0 4200 V
1.000 UL
LTb
5235 600 M
0 63 V
0 4137 R
0 -63 V
stroke
5235 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 2048)]
] -66.7 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTa
4693 600 M
0 4200 V
1.000 UL
LTb
4693 600 M
0 63 V
0 4137 R
0 -63 V
stroke
4693 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 1024)]
] -66.7 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTa
4151 600 M
0 4200 V
1.000 UL
LTb
4151 600 M
0 63 V
0 4137 R
0 -63 V
stroke
4151 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 512)]
] -66.7 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTa
3609 600 M
0 3337 V
0 800 R
0 63 V
1.000 UL
LTb
3609 600 M
0 63 V
0 4137 R
0 -63 V
stroke
3609 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 256)]
] -66.7 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTa
3067 600 M
0 3337 V
0 800 R
0 63 V
1.000 UL
LTb
3067 600 M
0 63 V
0 4137 R
0 -63 V
stroke
3067 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 128)]
] -66.7 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTa
2525 600 M
0 3337 V
0 800 R
0 63 V
1.000 UL
LTb
2525 600 M
0 63 V
0 4137 R
0 -63 V
stroke
2525 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 64)]
] -66.7 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTa
1984 600 M
0 3337 V
0 800 R
0 63 V
1.000 UL
LTb
1984 600 M
0 63 V
0 4137 R
0 -63 V
stroke
1984 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 32)]
] -66.7 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTa
1442 600 M
0 3337 V
0 800 R
0 63 V
1.000 UL
LTb
1442 600 M
0 63 V
0 4137 R
0 -63 V
stroke
1442 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 16)]
] -66.7 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTa
900 600 M
0 4200 V
1.000 UL
LTb
900 600 M
0 63 V
0 4137 R
0 -63 V
stroke
900 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 8)]
] -66.7 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTb
900 600 M
5960 0 V
0 4200 V
-5960 0 V
900 600 L
LTb
200 2700 M
gsave 0 setgray
currentpoint gsave translate 90 rotate 0 0 moveto
[ [(Helvetica) 200.0 0.0 true true 0 (Get Latency \(usec\))]
] -66.7 MCshow
grestore
grestore
LTb
3880 100 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 (Message size \(bytes\))]
] -66.7 MCshow
grestore
2.000 UP
2.000 UP
5.000 UL
LT0
LTb
2940 4637 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 (DCMF)]
] -66.7 MRshow
grestore
LT0
3060 4637 M
606 0 V
900 773 M
542 0 V
542 2 V
541 0 V
542 1 V
542 46 V
542 46 V
542 68 V
542 132 V
541 290 V
542 579 V
542 1138 V
900 773 Pls
1442 773 Pls
1984 775 Pls
2525 775 Pls
3067 776 Pls
3609 822 Pls
4151 868 Pls
4693 936 Pls
5235 1068 Pls
5776 1358 Pls
6318 1937 Pls
6860 3075 Pls
3363 4637 Pls
2.000 UP
5.000 UL
LT2
LTb
2940 4437 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 (ARMCI)]
] -66.7 MRshow
grestore
LT2
3060 4437 M
606 0 V
900 972 M
542 -1 V
542 4 V
541 0 V
542 -2 V
542 38 V
542 51 V
542 52 V
542 136 V
541 313 V
542 569 V
542 1152 V
900 972 Crs
1442 971 Crs
1984 975 Crs
2525 975 Crs
3067 973 Crs
3609 1011 Crs
4151 1062 Crs
4693 1114 Crs
5235 1250 Crs
5776 1563 Crs
6318 2132 Crs
6860 3284 Crs
3363 4437 Crs
2.000 UP
5.000 UL
LT3
LTb
2940 4237 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 (ARMCI-Interrupts)]
] -66.7 MRshow
grestore
LT3
3060 4237 M
606 0 V
900 2108 M
542 2 V
542 12 V
541 24 V
542 -2 V
542 49 V
542 25 V
542 84 V
542 138 V
541 274 V
542 566 V
542 1136 V
900 2108 Star
1442 2110 Star
1984 2122 Star
2525 2146 Star
3067 2144 Star
3609 2193 Star
4151 2218 Star
4693 2302 Star
5235 2440 Star
5776 2714 Star
6318 3280 Star
6860 4416 Star
3363 4237 Star
2.000 UP
5.000 UL
LT1
LTb
2940 4037 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 (ARMCI-CHT)]
] -66.7 MRshow
grestore
LT1
3060 4037 M
606 0 V
900 1377 M
542 32 V
542 -51 V
541 2 V
542 3 V
542 79 V
542 -4 V
542 143 V
542 -193 V
541 417 V
542 525 V
542 1186 V
900 1377 Box
1442 1409 Box
1984 1358 Box
2525 1360 Box
3067 1363 Box
3609 1442 Box
4151 1438 Box
4693 1581 Box
5235 1388 Box
5776 1805 Box
6318 2330 Box
6860 3516 Box
3363 4037 Box
1.000 UL
LTb
900 600 M
5960 0 V
0 4200 V
-5960 0 V
900 600 L
2.000 UP
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Helvetica
%%Pages: 1
